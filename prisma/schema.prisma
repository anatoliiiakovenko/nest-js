generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model Movie {
  id            String      @id @default(uuid())
  title         String
  description   String?
  rating        Float       @default(0.0)
  releaseYear   Int         @map("release_year")
  genre         Genre       @default(DRAMA)
  actors        Actor[]     @relation("movie_actors")
  reviews       Review[]    @relation("movie_reviews")
  porter        MoviePoster @relation(fields: [porserId], references: [id])
  porserId      String      @unique @map("poster_id")
  isAvailable   Boolean     @default(false) @map("is_available")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  Actor         Actor?      @relation(fields: [actorId], references: [id])
  actorId       String?
  moviePosterId String

  @@map("movies")
}

model Review {
  id        String   @id @default(uuid())
  text      String
  rating    Decimal  @default(0.0)
  movieId   String   @map("movie_id")
  movie     Movie    @relation("movie_reviews", fields: [movieId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reviews")
}

model Actor {
  id        String   @id @default(uuid())
  name      String
  movies    Movie[]  @relation("movie_actors")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Movie     Movie[]

  @@map("actors")
}

model MoviePoster {
  id        String   @id @default(uuid())
  url       String
  movie     Movie?   @relation
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("movie_posters")
}

enum Genre {
  ACTION
  COMEDY
  DRAMA
  HORROR

  @@map("enum_genres")
}
